package fproject.app.fproject.vo;

import java.io.Serializable;
import java.sql.Blob;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * 채팅 모델 클래스.
 * 
 * @author generated by ERMaster
 * @version $Id$
 */
public class ChatVo implements Serializable {

	/** serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** 채팅번호. */
	private Integer cnum;

	/** 상태. */
	private Integer state;

	/** 내용. */
	private String content;

	/** 작성일자. */
	private Date regdate;

	/** 이모티콘번호. */
	private Integer emoticonnum;

	/** 원본이미지이름. */
	private String orgimg;

	/** 저장이미지이름. */
	private String saveimg;

	/** 파일크기. */
	private Blob imgsize;

	/** 채팅리스트. */
	private ChatlistVo chatlist;

	/** 계정. */
	private AccountVo account;

	/** 읽은사람정보 목록. */
	private Set<ReadinfoVo> readinfoSet;

	/**
	 * 생성자.
	 */
	public ChatVo() {
		this.readinfoSet = new HashSet<ReadinfoVo>();
	}

	/**
	 * 채팅번호을 설정합니다..
	 * 
	 * @param cnum
	 *            채팅번호
	 */
	public void setCnum(Integer cnum) {
		this.cnum = cnum;
	}

	/**
	 * 채팅번호을 가져옵니다..
	 * 
	 * @return 채팅번호
	 */
	public Integer getCnum() {
		return this.cnum;
	}

	/**
	 * 상태을 설정합니다..
	 * 
	 * @param state
	 *            상태
	 */
	public void setState(Integer state) {
		this.state = state;
	}

	/**
	 * 상태을 가져옵니다..
	 * 
	 * @return 상태
	 */
	public Integer getState() {
		return this.state;
	}

	/**
	 * 내용을 설정합니다..
	 * 
	 * @param content
	 *            내용
	 */
	public void setContent(String content) {
		this.content = content;
	}

	/**
	 * 내용을 가져옵니다..
	 * 
	 * @return 내용
	 */
	public String getContent() {
		return this.content;
	}

	/**
	 * 작성일자을 설정합니다..
	 * 
	 * @param regdate
	 *            작성일자
	 */
	public void setRegdate(Date regdate) {
		this.regdate = regdate;
	}

	/**
	 * 작성일자을 가져옵니다..
	 * 
	 * @return 작성일자
	 */
	public Date getRegdate() {
		return this.regdate;
	}

	/**
	 * 이모티콘번호을 설정합니다..
	 * 
	 * @param emoticonnum
	 *            이모티콘번호
	 */
	public void setEmoticonnum(Integer emoticonnum) {
		this.emoticonnum = emoticonnum;
	}

	/**
	 * 이모티콘번호을 가져옵니다..
	 * 
	 * @return 이모티콘번호
	 */
	public Integer getEmoticonnum() {
		return this.emoticonnum;
	}

	/**
	 * 원본이미지이름을 설정합니다..
	 * 
	 * @param orgimg
	 *            원본이미지이름
	 */
	public void setOrgimg(String orgimg) {
		this.orgimg = orgimg;
	}

	/**
	 * 원본이미지이름을 가져옵니다..
	 * 
	 * @return 원본이미지이름
	 */
	public String getOrgimg() {
		return this.orgimg;
	}

	/**
	 * 저장이미지이름을 설정합니다..
	 * 
	 * @param saveimg
	 *            저장이미지이름
	 */
	public void setSaveimg(String saveimg) {
		this.saveimg = saveimg;
	}

	/**
	 * 저장이미지이름을 가져옵니다..
	 * 
	 * @return 저장이미지이름
	 */
	public String getSaveimg() {
		return this.saveimg;
	}

	/**
	 * 파일크기을 설정합니다..
	 * 
	 * @param imgsize
	 *            파일크기
	 */
	public void setImgsize(Blob imgsize) {
		this.imgsize = imgsize;
	}

	/**
	 * 파일크기을 가져옵니다..
	 * 
	 * @return 파일크기
	 */
	public Blob getImgsize() {
		return this.imgsize;
	}

	/**
	 * 채팅리스트을 설정합니다..
	 * 
	 * @param chatlist
	 *            채팅리스트
	 */
	public void setChatlist(ChatlistVo chatlist) {
		this.chatlist = chatlist;
	}

	/**
	 * 채팅리스트을 가져옵니다..
	 * 
	 * @return 채팅리스트
	 */
	public ChatlistVo getChatlist() {
		return this.chatlist;
	}

	/**
	 * 계정을 설정합니다..
	 * 
	 * @param account
	 *            계정
	 */
	public void setAccount(AccountVo account) {
		this.account = account;
	}

	/**
	 * 계정을 가져옵니다..
	 * 
	 * @return 계정
	 */
	public AccountVo getAccount() {
		return this.account;
	}

	/**
	 * 읽은사람정보 목록을 설정합니다..
	 * 
	 * @param readinfoSet
	 *            읽은사람정보 목록
	 */
	public void setReadinfoSet(Set<ReadinfoVo> readinfoSet) {
		this.readinfoSet = readinfoSet;
	}

	/**
	 * 읽은사람정보를 추가합니다..
	 * 
	 * @param readinfo
	 *            읽은사람정보
	 */
	public void addReadinfo(ReadinfoVo readinfo) {
		this.readinfoSet.add(readinfo);
	}

	/**
	 * 읽은사람정보 목록을 가져옵니다..
	 * 
	 * @return 읽은사람정보 목록
	 */
	public Set<ReadinfoVo> getReadinfoSet() {
		return this.readinfoSet;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((cnum == null) ? 0 : cnum.hashCode());
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		ChatVo other = (ChatVo) obj;
		if (cnum == null) {
			if (other.cnum != null) {
				return false;
			}
		} else if (!cnum.equals(other.cnum)) {
			return false;
		}
		return true;
	}

}
